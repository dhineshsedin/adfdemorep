{
	"name": "rank",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_rank",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"linkedService": {
						"referenceName": "ls_blobstorage_demo",
						"type": "LinkedServiceReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "outputdataset",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "rank1"
				},
				{
					"name": "alterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          empid as short,",
				"          name as string,",
				"          gender as string,",
				"          country as string,",
				"          salary as short,",
				"          department as short",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     container: 'adfdkdemo',",
				"     folderPath: 'input',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> source2",
				"alterRow1 rank(desc(salary, true),",
				"     output({rank based on salary} as long)) ~> rank1",
				"source1 alterRow(updateIf(empid==10)) ~> alterRow1",
				"rank1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['rankbasedonsalary'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          empid,",
				"          name,",
				"          gender,",
				"          country,",
				"          salary,",
				"          department,",
				"          {rank based on salary}",
				"     ),",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}