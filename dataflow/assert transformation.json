{
	"name": "assert transformation",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_Assert",
						"type": "DatasetReference"
					},
					"name": "emp"
				},
				{
					"dataset": {
						"referenceName": "ds_department_Csv",
						"type": "DatasetReference"
					},
					"name": "dep"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "outputdataset",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "assert1"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          empid as string,",
				"          name as string,",
				"          gender as string,",
				"          doj as string,",
				"          department as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> emp",
				"source(output(",
				"          depid as string,",
				"          depname as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> dep",
				"emp, dep assert(expectTrue(!isNull((toDate(doj, 'yyyyMMdd'))), false, 'assert doj', null, 'doj date validation'),",
				"     expectUnique(empid, false, 'assert empid', null, 'unique empid'),",
				"     expectExists(department == depid, false, 'assert depid', null, 'checking whether dep id exists in dep table')) ~> assert1",
				"assert1 derive(iserrorrow = isError(),",
				"          isincorrectdeprow = hasError('assert depid')) ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          empid,",
				"          name,",
				"          gender,",
				"          doj,",
				"          department,",
				"          iserrorrow,",
				"          isincorrectdeprow",
				"     )) ~> sink1"
			]
		}
	}
}